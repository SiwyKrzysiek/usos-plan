@model Plan
@{
    ViewData["Title"] = "Poprany plan";
}

@section Head
    {
    <link rel="stylesheet" href="~/css/plan.css" />
}

@*<h2>Wczytano pojedyńcze zajęcia:</h2>
@foreach (var universityClass in Model.SingularClasses)
{
    <p>@universityClass.Name @universityClass.Type @universityClass.GroupNumber @universityClass.DayOfWeek @universityClass.StartTime</p>
}

<h2>Wczytano następujące grupy zajęć</h2>
@foreach (var classGroup in Model.ClassGroups)
{
    <h3>@classGroup.Name @classGroup.Type</h3>
    foreach (var universityClass in classGroup)
    {
        <p>@universityClass.Name @universityClass.Type @universityClass.GroupNumber @universityClass.DayOfWeek @universityClass.StartTime</p>
    }
}*@

<div class="row">
    <div class="col-sm-12">
        <div id="display"></div>
    </div>
</div>

@section scripts {
    <script>

            var model = JSON.parse('@Json.Serialize(Model)');
            alert(model.classes);

            var ViewModel = function(first, last) {
            this.firstName = ko.observable(first);
            this.lastName = ko.observable(last);

            this.fullName = ko.pureComputed(function() {
                // Knockout tracks dependencies automatically. It knows that fullName depends on firstName and lastName, because these get called when evaluating fullName.
                return this.firstName() + " " + this.lastName();
            }, this);
        };

            window.onload = function () {

                let target = document.getElementById("display");
                dsiplayTable(target, 6);
            }

            function dsiplayTable(div, rowCount) {
                let tableHeaders = ["Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek"]
                let width = tableHeaders.length;

                let table = document.createElement("table");
                table.classList.add("planTable");

                table.appendChild(createHeader(tableHeaders));
                for (let i = 0; i < rowCount; i++) {
                    table.appendChild(crateRow(width))
                }


                div.appendChild(table);
            }

            function createHeader(headers) {
                let tr = document.createElement("tr");

                for (const header of headers) {
                    let text = document.createTextNode(header);
                    let th = document.createElement("th");
                    th.appendChild(text);

                    tr.appendChild(th);
                }

                return tr;
            }

            function crateRow(width) {
                let tr = document.createElement("tr");

                for (let i = 0; i < width; i++) {
                    let td = document.createElement("td");
                    td.classList.add("empty");

                    tr.appendChild(td);
                }

                return tr;
            }

    </script>
}
