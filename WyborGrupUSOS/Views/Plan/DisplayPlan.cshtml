@model Plan
@{
    ViewData["Title"] = "Poprany plan";
}

@section Head
    {
    <link rel="stylesheet" href="~/css/plan.css" />
}

@*<h2>Wczytano pojedyńcze zajęcia:</h2>
    @foreach (var universityClass in Model.SingularClasses)
    {
        <p>@universityClass.Name @universityClass.Type @universityClass.GroupNumber @universityClass.DayOfWeek @universityClass.StartTime</p>
    }

    <h2>Wczytano następujące grupy zajęć</h2>
    @foreach (var classGroup in Model.ClassGroups)
    {
        <h3>@classGroup.Name @classGroup.Type</h3>
        foreach (var universityClass in classGroup)
        {
            <p>@universityClass.Name @universityClass.Type @universityClass.GroupNumber @universityClass.DayOfWeek @universityClass.StartTime</p>
        }
    }*@

<div class="row">
    <div class="col-sm-12">
        <h2>aa: <strong data-bind="text: firstName"></strong></h2>
        <div id="display"></div>
    </div>
</div>

<div class="row" style="margin-top: 10px">
    <div class="col-sm-12">
        <form>
            <div class="form-group">
                <label for="select1" class="col-sm-2 control-label">Grupa1:</label>
                <div class="col-sm-10">
                    <select class="form-control" id="select1">
                        <option>1</option>
                        <option>2</option>
                        <option>3</option>
                        <option>4</option>
                        <option>5</option>
                    </select>
                </div>
            </div>
            <div class="form-group">
                <label for="select2" class="col-sm-2 control-label">Grupa2:</label>
                <div class="col-sm-10">
                    <select class="form-control" id="select2">
                        <option>1</option>
                        <option>2</option>
                        <option>3</option>
                        <option>4</option>
                        <option>5</option>
                    </select>
                </div>
            </div>
        </form>
    </div>
</div>

@section scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.5.0/knockout-min.js"></script>
    <script>

        //alert(model.classes);

        var ViewModel = function(first, last) {
            this.firstName = ko.observable(first);
            this.lastName = ko.observable(last);
        };

        let model;
        let times;

        window.onload = function () {
            model = JSON.parse('@Json.Serialize(Model)');
            let target = document.getElementById("display");
            dsiplayTable(target, model.startingTimes.length);

            times = model.startingTimes;
            addTimeStamps(model);

            //let viewModel = new ViewModel("Jan", "Kowalski");
            //ko.applyBindings(viewModel);
        }

        function addTimeStamps(model) {
            for (let universityClass of model.singularClasses) {
                universityClass.startIndex = calculatePositionInDay(universityClass, model.startingTimes);
            }

            for (let group of model.classGroups)
                for (let universityClass of group) {
                    universityClass.startIndex = calculatePositionInDay(universityClass, model.startingTimes);
                }
        }

        function calculatePositionInDay(universityClass, startingTimes) {
            for (let i = 0; i < startingTimes.length; i++) {
                let time = startingTimes[i];
                if (areTimesTheSame(universityClass.startTime, time))
                    return i;
            }
        }

        function areTimesTheSame(time1, time2) {
            return time1.hour === time2.hour && time1.minute === time2.minute;
        }

        function dsiplayTable(div, rowCount) {
            let tableHeaders = ["Poniedziałek", "Wtorek", "Środa", "Czwartek", "Piątek"]
            let width = tableHeaders.length;

            let table = document.createElement("table");
            table.classList.add("planTable");

            table.appendChild(createHeader(tableHeaders));
            for (let i = 0; i < rowCount; i++) {
                table.appendChild(crateRow(width))
            }


            div.appendChild(table);
        }

        function createHeader(headers) {
            let tr = document.createElement("tr");

            for (const header of headers) {
                let text = document.createTextNode(header);
                let th = document.createElement("th");
                th.appendChild(text);

                tr.appendChild(th);
            }

            return tr;
        }

        function crateRow(width) {
            let tr = document.createElement("tr");

            for (let i = 0; i < width; i++) {
                let td = document.createElement("td");
                td.classList.add("empty");

                tr.appendChild(td);
            }

            return tr;
        }

    </script>
}
